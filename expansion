using DifferentialEquations
using Unitful
using UnitfulAstro
using Logging

# Set up logging
logger = Logging.SimpleLogger(stdout, Logging.Warn)
global_logger(logger)

# Constants
G = 6.67430e-11u"m^3/kg/s^2"  # Gravitational constant in appropriate units
H0_initial = 67u"km/s/Mpc"  # Hubble constant today

# Critical density today in kg/m^3
rho_crit_0 = (3 * (H0_initial)^2 / (8 * π * G))

# Dimensionless density parameters
Omega_m = 0.3  # Matter density parameter
Omega_r = 1e-5  # Radiation density parameter
Omega_de = 0.7  # Dark energy density parameter
k = 0  # Curvature

# Scale factor today
a = 1.0  # Dimensionless

# Density components with proper units
rho_m = Omega_m * rho_crit_0  # Matter density in kg/m^3
rho_r = Omega_r * rho_crit_0  # Radiation density in kg/m^3
rho_de = Omega_de * rho_crit_0  # Dark energy density in kg/m^3

# Hubble constant today in s^-1 (dimensionless)
H0 = H0_initial |> ustrip |> float

# Initial conditions
adot = H0 * a
H = H0

# Define the grid size (scale at which homogeneity and isotropy is valid, ~100 Mpc)
grid_unit_size = 100u"Mpc" |> uconvert(u"m") |> ustrip  # Convert to meters
R = 10 * grid_unit_size  

# Grid parameters
Nx = Ny = Nz = 20  # Number of grid spacings in x, y, and z
dtype = Float64  # Data type for arrays

# Time step parameters
stop_sim_time = 1e4  # Simulation stops at this time
dtime = 1e3  # Time step in seconds

# Functions to update densities
rho_mat(a) = rho_m / a^3
rho_rad(a) = rho_r / a^4

# Friedmann equation (dimensionless)
function friedmann!(du, u, p, t)
    a, adot = u
    H2 = (8 * π * G / 3) * (rho_mat(a) + rho_rad(a) + rho_de) - k / a^2
    du[1] = adot
    du[2] = -H2 * a / H0^2
end

# Initial condition
u0 = [a, adot]

# Time span
tspan = (0.0, stop_sim_time)

# Solving the ODE
prob = ODEProblem(friedmann!, u0, tspan)
sol = solve(prob, Tsit5(), dt=dtime)

# Extracting results
time_points = sol.t
scale_factor = sol[1, :]
expansion_rate = sol[2, :]

# Plotting results (using Plots.jl)
using Plots

plot(time_points, scale_factor, label="Scale Factor (a)", xlabel="Time (s)", ylabel="Scale Factor")
plot(time_points, expansion_rate, label="Expansion Rate (adot)", xlabel="Time (s)", ylabel="Expansion Rate (s^-1)", legend=:topright)

# Save plot if necessary
savefig("cosmic_expansion.png")
